
import java.awt.*;

public class Creature{
  Genotype geno;
  Phenotype pheno;
  
  private final int BIG = 50, SMALL = 25;
  private final int SPEED = 1, LIFE = 10;
  private int x,y;
  private boolean moveUp, moveLeft, canBreed, canMove, created, death, dead;
  private long startTime;
  
  public Creature(){
    this(new char[] { 'B','b','r','r'}, 1, 1);
  }
  
  public Creature(char[] genotypes, int newX, int newY){
    geno = new Genotype((char[])genotypes);
    createPheno();
    x = newX;
    y = newY;
    canBreed = true;
    canMove = true;
    created = true;
  }
  
  private void createPheno(){
    char[] sizes = new char[] {geno.getGenotypes()[0], geno.getGenotypes()[1]};
    char[] cols = new char[] {geno.getGenotypes()[2], geno.getGenotypes()[3]};
    System.err.println("GOT COLOURS = " + cols[0] + " , " + cols[1]);
    System.err.println("GOT SIZES = " + sizes[0] + " , " + sizes[1]);
    char pcol, psize;
    System.out.println("S: " + sizes[0]);
    System.out.println(sizes[1]);
    //get the sizes
    if(sizes[0] == sizes[1])
      psize = sizes[0];
    else if (Character.isUpperCase(sizes[0]) && Character.isLowerCase(sizes[1]))
      psize = sizes[0];
    else if (Character.isUpperCase(sizes[1]) && Character.isLowerCase(sizes[0]))
      psize = sizes[1];
    else
      return;
    
    pcol = 'a';
    System.out.println("psize = " + psize);
    //get the colours
    if(cols[0] == cols[1])
      pcol = cols[0];
    else if (Character.isUpperCase(cols[0]) && Character.isLowerCase(cols[1]))
      pcol = cols[0];
    else if (Character.isUpperCase(cols[1]) && Character.isLowerCase(cols[0]))
      pcol = cols[1];
    else{
      System.exit(0);
    }
    if(pcol == 'b'|| pcol == 'B'){
      char temp = pcol;
      pcol = psize;
      psize = temp;
    }
    if(psize == 'r' || psize == 'R'){
      char temp = psize;
      psize = pcol;
      pcol = temp;
    }
    System.out.println("pcol = " + pcol);
    
    //create the phenotype object
    pheno = new Phenotype(psize,pcol);
  }
  
  //-----paint function-----//
  public void draw(Graphics2D g){
    if(!created)
      return;
    if(!death)
      calcMovement();
    else
      calcDeath();
    g.setColor(getColour());
    g.fillOval(x,y,(int)getSize().getWidth(),(int)getSize().getHeight());
  }
  //-----end of paint function-----//
  
  //-----movement-----//
  public void calcMovement(){
    if(!moveLeft && (x+getSize().getWidth()) >= GeneticsAI.PWIDTH-5)
      moveLeft = true;
    if(moveLeft && x <= 0)
      moveLeft = false;
    if(!moveUp && (y+getSize().getHeight()) >= GeneticsAI.PHEIGHT-25)
      moveUp = true;
    if(moveUp && y <= 0)
      moveUp = false;
    
    move();
  }
  
  public void calcDeath(){
    if(System.currentTimeMillis()- startTime >= 10)
      dead = true;
  }
  
  public void move(){
    if(canMove){
      if(!moveLeft)
        x += SPEED;
      else
        x -= SPEED;
      
      if(!moveUp)
        y += SPEED;
      else
        y -= SPEED;
    }
  }
  //-----end of movement-----//
  
  //-----set functions-----//
  public void setBreedable(boolean br){
    canBreed = br;
  }
  public void setMovable(boolean mv){
    canMove = mv;
  }
  public void setDestroy(){
    startTime = System.currentTimeMillis();
    death = true;
  }
  //-----end of set functions-----//
  
  //------Return functions------//
  public boolean isDead(){
    return dead;
  }
  public Color getColour(){
    //System.out.println("pheno col: "+pheno.getColour());
    try{
    switch(pheno.getColour()){
      case Phenotype.COL_RED:
        return Color.RED;
      case Phenotype.COL_BLUE:
        return new Color(96,223,229);
      default:
        System.err.println("ERROR");
    }
    }catch(NullPointerException e){
      System.err.println("getColour(): " +e.getMessage());
    }
    return Color.PINK;
  }  
  public Dimension getSize(){
    switch(pheno.getSize()){
      case Phenotype.SIZE_BIG:
        return new Dimension(BIG,BIG);
      case Phenotype.SIZE_SMALL:
        return new Dimension(SMALL,SMALL);
      default:
        return new Dimension(BIG,BIG);
    }
  }  
  public Genotype getGeno(){
    return geno;
  }
  public Phenotype getPheno(){
    return pheno;
  }
  
  public String[] getGamete(){
    String[] re = new String[]{"","","",""};
    //System.out.println(""+geno.getGenotypes()[0]+""+ geno.getGenotypes()[1]);
    re[0] += ""+geno.getGenotypes()[0] + ""+geno.getGenotypes()[2];
    re[1] += ""+geno.getGenotypes()[0] + ""+geno.getGenotypes()[3];
    re[2] += ""+geno.getGenotypes()[1] + ""+geno.getGenotypes()[2];
    re[3] +=""+ geno.getGenotypes()[1] +""+ geno.getGenotypes()[3];
    return re;
  }  
  public boolean canBreed(){
    return canBreed;
  }  
  public boolean isClicked(int mouseX, int mouseY){
    if(mouseX >= x && mouseX <= x+getSize().getWidth()&&
       mouseY >= y && mouseY <= y+getSize().getHeight())
      return true;
    return false;
  }
  //-----end of return functions-----//
}